// https://kylewbanks.com/blog/tutorial-opengl-with-golang-part-2-drawing-the-game-board

package main

import (
	"fmt"
	"log"
	"time"
	"strings"
	"runtime"
	"math/rand"
	"github.com/go-gl/gl/v4.6-core/gl"
	"github.com/go-gl/glfw/v3.3/glfw"
)

const (
	FPS       =  60
	rows      =  10
	columns   =  10
    width     = 500
    height    = 500
	threshold = 0.15

	vertexShader = `
		#version 460

		layout (location = 0) in vec3 vertex;
		layout (location = 1) in vec3 color;
		layout (location = 2) in vec3 offset;

		out vec3 out_color;

		void main () {
			gl_Position = vec4(vertex + offset, 1.0);
			out_color = color;
		}
	` + "\x00"

	fragmentShader = `
		#version 460

		in vec3 color;

		out vec4 frag_color;

		void main () {
			frag_color = vec4(color, 1.0);
		}
	` + "\x00"
)

var (
	triangle = []float32 {
		-0.5,  0.5, 0.0,
		-0.5, -0.5, 0.0,
		 0.5, -0.5, 0.0,
	}
	square = []float32 {
		-0.5,  0.5, 0.0,
		-0.5, -0.5, 0.0,
		 0.5, -0.5, 0.0,
		-0.5,  0.5, 0.0,
		 0.5,  0.5, 0.0,
		 0.5, -0.5, 0.0,
	}
)

type cell struct {
	drawable uint32
	x, y int
}


// draw the cell
func (c *cell) draw () {
	gl.BindVertexArray(c.drawable)
	gl.DrawArrays(gl.TRIANGLES, 0, int32(len(square) / 3))
}


// main function
func main () {
    runtime.LockOSThread()

    window := initGlfw()
    defer glfw.Terminate()

	program := initOpenGL()

	cells := makeCells()
    for !window.ShouldClose() {
		t := time.Now()

        draw(cells, window, program)

		time.Sleep(time.Second/time.Duration(FPS) - time.Since(t))
    }
}


// draw things on the screen
func draw (cells [][]*cell, window *glfw.Window, program uint32) {
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
	gl.UseProgram(program)

	for x := range cells {
		for _, c := range cells[x] {
			if rand.Float64() < threshold {
				c.draw()
			}
		}
	}

	glfw.PollEvents()
	window.SwapBuffers()
}


// initializes glfw and returns a Window to use.
func initGlfw () *glfw.Window {
    if err := glfw.Init(); err != nil {
		panic(err)
    }

    glfw.WindowHint(glfw.Resizable, glfw.True)
	// use OpenGL 4.6-core
    glfw.WindowHint(glfw.ContextVersionMajor, 4)
    glfw.WindowHint(glfw.ContextVersionMinor, 6)
    glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
    glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)

    window, err := glfw.CreateWindow(width, height, "Vox-GO!", nil, nil)
    if err != nil {
		panic(err)
    }
    window.MakeContextCurrent()
    return window
}

// initializes OpenGL an returns a program
func initOpenGL () uint32 {
    if err := gl.Init(); err != nil {
		panic(err)
    }
    version := gl.GoStr(gl.GetString(gl.VERSION))
    log.Println("OpenGL version", version)

	vertShader, err := compileShader(vertexShader, gl.VERTEX_SHADER)
	if err != nil {
		panic(err)
	}
	fragShader, err := compileShader(fragmentShader, gl.FRAGMENT_SHADER)
	if err != nil {
		panic(err)
	}

    program := gl.CreateProgram()
	gl.AttachShader(program, vertShader)
	gl.AttachShader(program, fragShader)
    gl.LinkProgram(program)
    return program
}

// generate a vertex array from a list of points
func makeVAO (points []float32) uint32 {
	var vbo uint32
	gl.GenBuffers(1, &vbo)
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.BufferData(gl.ARRAY_BUFFER, 4 * len(points), gl.Ptr(points), gl.STATIC_DRAW)

	var vao uint32
	gl.GenVertexArrays(1, &vao)
	gl.BindVertexArray(vao)
	gl.EnableVertexAttribArray(0)
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 0, nil)

	return vao
}

// compile the shader and return a pointer to it
func compileShader (source string, shaderType uint32) (uint32, error) {
	shader := gl.CreateShader(shaderType)

	compSrc, free := gl.Strs(source)
	gl.ShaderSource(shader, 1, compSrc, nil)
	free()
	gl.CompileShader(shader)

	var status int32
	gl.GetShaderiv(shader, gl.COMPILE_STATUS, &status)
	if status == gl.FALSE {
		var logLength int32
		gl.GetShaderiv(shader, gl.INFO_LOG_LENGTH, &logLength)

		log := strings.Repeat("\x00", int(logLength + 1))
		gl.GetShaderInfoLog(shader, logLength, nil, gl.Str(log))

		return 0, fmt.Errorf("failed to compile %v: %v", source, log)
	}
	return shader, nil
}

// create the grid
func makeCells () [][]*cell {
	cells := make([][]*cell, rows, rows)
	for x := 0; x < rows; x++ {
		for y := 0; y < columns; y++ {
			c := newCell(x, y)
			cells[x] = append(cells[x], c)
		}
	}
	return cells
}

// create a cell
func newCell (x, y int) *cell {
	points := make([]float32, len(square), len(square))
	copy(points, square)

	for i := 0; i < len(points); i++ {
		var position, size float32
		switch i % 3 {
		case 0:
			size = 1.0 / float32(columns)
			position = float32(x) * size
		case 1:
			size = 1.0 / float32(rows)
			position = float32(y) * size
		default:
			continue
		}
		if points[i] < 0 {
			points[i] = position * 2 - 1
		} else {
			points[i] = (position + size) * 2 - 1
		}
	}
	return &cell {
		drawable: makeVAO(points),
		x: x,
		y: y,
	}
}
